[{"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\index.tsx":"1","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\App.tsx":"3","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\enums\\PageRoutes.ts":"4","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\MenuDrawer.tsx":"5","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\index.ts":"6","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\Iconify.tsx":"7","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\DashboardPage.tsx":"8","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\EmergencyPage.tsx":"9","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ManagementPage.tsx":"10","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\InformationPage.tsx":"11","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ProfilePage.tsx":"12","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\SettingsPage.tsx":"13","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\fetchLocationInfo.ts":"14","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\constants\\EmergencyNumbers.ts":"15","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\EmergencyConfirmationModal.tsx":"16","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockUser.ts":"17","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockGlucoseReadings.ts":"18","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\getCountryFromCoordinates.ts":"19","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockInformation.ts":"20","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\MapPage.tsx":"21"},{"size":277,"mtime":1695605280259,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1695597838159,"results":"24","hashOfConfig":"23"},{"size":1155,"mtime":1695694786638,"results":"25","hashOfConfig":"23"},{"size":232,"mtime":1695694749238,"results":"26","hashOfConfig":"23"},{"size":4621,"mtime":1695694817565,"results":"27","hashOfConfig":"23"},{"size":415,"mtime":1695694664557,"results":"28","hashOfConfig":"23"},{"size":388,"mtime":1695619670645,"results":"29","hashOfConfig":"23"},{"size":165,"mtime":1695605301493,"results":"30","hashOfConfig":"23"},{"size":1966,"mtime":1695610488954,"results":"31","hashOfConfig":"23"},{"size":688,"mtime":1695695812976,"results":"32","hashOfConfig":"23"},{"size":2985,"mtime":1695694218939,"results":"33","hashOfConfig":"23"},{"size":3225,"mtime":1695694637443,"results":"34","hashOfConfig":"23"},{"size":167,"mtime":1695605302098,"results":"35","hashOfConfig":"23"},{"size":1467,"mtime":1695610481851,"results":"36","hashOfConfig":"23"},{"size":285,"mtime":1695610186550,"results":"37","hashOfConfig":"23"},{"size":1496,"mtime":1695619633031,"results":"38","hashOfConfig":"23"},{"size":466,"mtime":1695624283795,"results":"39","hashOfConfig":"23"},{"size":1528,"mtime":1695606463203,"results":"40","hashOfConfig":"23"},{"size":565,"mtime":1695610080474,"results":"41","hashOfConfig":"23"},{"size":300,"mtime":1695627779848,"results":"42","hashOfConfig":"23"},{"size":1619,"mtime":1695695158032,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1w9kd6b",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"47"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"47"},"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\index.tsx",[],[],["114"],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\App.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\enums\\PageRoutes.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\MenuDrawer.tsx",["115"],[],"import {\r\n  Container,\r\n  Drawer,\r\n  Button,\r\n  Box,\r\n  List,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItem,\r\n  IconButton,\r\n  Badge,\r\n  Typography,\r\n  Menu,\r\n  MenuItem,\r\n  AppBar,\r\n  Toolbar,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport Iconify from \"./Iconify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { PageRoutes } from \"../enums/PageRoutes\";\r\n\r\ninterface IMenuDrawerItem {\r\n  name: string;\r\n  icon: string;\r\n  route: PageRoutes;\r\n}\r\n\r\nconst MenuDrawer = () => {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const navigate = useNavigate();\r\n\r\n  const menuDrawerItems: IMenuDrawerItem[] = [\r\n    {\r\n      name: \"Dashboard\",\r\n      icon: \"eva:layers-outline\",\r\n      route: PageRoutes.Dashboard,\r\n    },\r\n    {\r\n      name: \"Information\",\r\n      icon: \"eva:info-outline\",\r\n      route: PageRoutes.Information,\r\n    },\r\n    {\r\n      name: \"Glucose Management\",\r\n      icon: \"eva:color-picker-outline\",\r\n      route: PageRoutes.Management,\r\n    },\r\n    {\r\n      name: \"Emergency\",\r\n      icon: \"eva:alert-triangle-outline\",\r\n      route: PageRoutes.Emergency,\r\n    },\r\n    {\r\n      name: \"Settings\",\r\n      icon: \"eva:settings-2-outline\",\r\n      route: PageRoutes.Settings,\r\n    },\r\n    {\r\n      name: \"Map\",\r\n      icon: \"eva:map-outline\",\r\n      route: PageRoutes.Map,\r\n    },\r\n  ];\r\n\r\n  const sendToRoute = (route: string) => {\r\n    navigate(route);\r\n  };\r\n\r\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuSelect = () => {\r\n    setAnchorEl(null);\r\n    navigate(PageRoutes.Profile);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Button variant=\"contained\" onClick={() => setDrawerOpen(!drawerOpen)}>\r\n            <Iconify icon=\"eva:menu-outline\" sx={{ width: 50, height: 50 }} />\r\n          </Button>\r\n          <Typography\r\n            onClick={() => sendToRoute(PageRoutes.Dashboard)}\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ marginLeft: \"20px\", display: { xs: \"none\", sm: \"block\" }, cursor: \"pointer\" }}\r\n          >\r\n            LOGO\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          <Box sx={{ display: { xs: \"none\", md: \"flex\" } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show 17 new notifications\"\r\n              color=\"inherit\"\r\n            >\r\n              <Badge badgeContent={17} color=\"error\">\r\n                <Iconify icon=\"eva:bell-outline\" />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              size=\"large\"\r\n              edge=\"end\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"account-menu\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <Iconify icon=\"eva:person-outline\" />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n      >\r\n        <Box\r\n          sx={{ width: 250 }}\r\n          role=\"presentation\"\r\n          onClick={() => setDrawerOpen(false)}\r\n          onKeyDown={() => setDrawerOpen(false)}\r\n        >\r\n          <List>\r\n            {menuDrawerItems.map((item, index) => (\r\n              <ListItem key={index} disablePadding>\r\n                <ListItemButton onClick={() => sendToRoute(item.route)}>\r\n                  <ListItemIcon>\r\n                    <Iconify icon={item.icon} />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={item.name}\r\n                    sx={{ width: 20, height: 20 }}\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Drawer>\r\n      <Menu\r\n        id=\"account-menu\"\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\",\r\n        }}\r\n        keepMounted\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\",\r\n        }}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleMenuClose}\r\n      >\r\n        <MenuItem onClick={handleMenuSelect}>Profile</MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MenuDrawer;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\index.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\Iconify.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\DashboardPage.tsx",["116","117"],[],"import { useState, useEffect } from 'react';\r\n\r\nconst DashboardPage = () => {\r\n\r\n    return (\r\n        <p>Dash Content</p>\r\n    );\r\n}\r\n\r\nexport default DashboardPage","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\EmergencyPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ManagementPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\InformationPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ProfilePage.tsx",["118","119","120","121","122","123","124"],[],"import { Box, Button, Slider, TextField, Typography } from \"@mui/material\";\r\nimport { MOCK_USER } from \"../mocks/_mockUser\";\r\nimport { useState } from \"react\";\r\n\r\nconst ProfilePage = () => {\r\n  const {\r\n    givenNames,\r\n    verified,\r\n    email,\r\n    profilePictureURL,\r\n    medicareNumber,\r\n    sugarRange,\r\n    ketoneWarning,\r\n    surname,\r\n  } = MOCK_USER;\r\n\r\n  const onVerify = () => {\r\n    console.log(`verifying user ${email}`);\r\n  };\r\n\r\n  const onSave = () => {\r\n    return {\r\n\r\n    }\r\n  };\r\n\r\n  // TODO hook these up\r\n  const [glucoseRange, setGlucoseRange] = useState<number[]>(sugarRange as any);\r\n  const [ketoneLevel, setKetoneLevel] = useState(ketoneWarning);\r\n  const [userGivenNames, setUserGivenNames] = useState(givenNames);\r\n  const [userSurname, setUserSurname] = useState(surname);\r\n  const [medicare, setMedicare] = useState(medicareNumber);\r\n  const [profilePicture, setProfilePicture] = useState(profilePictureURL);\r\n  const [userEmail, setUserEmail] = useState(email);\r\n  const [verification, setVerification] = useState(verified);\r\n\r\n  const handleSugarChange = (event: { target: { value: any; }; }) => {\r\n    setGlucoseRange([...event.target.value]);\r\n  };\r\n\r\n  const handleKetoneChange = (event: { target: { value: string; }; }) => {\r\n    const level = event.target.value;\r\n    setKetoneLevel(Number(level));\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: \"20px\",\r\n        marginTop: \"50px\",\r\n      }}\r\n    >\r\n      <Box>\r\n        <img\r\n          src={profilePicture}\r\n          alt={`${userGivenNames[0]} ${userSurname} profile photo`}\r\n        />\r\n      </Box>\r\n      <Box sx={{ display: \"flex\", gap: \"12px\" }}>\r\n        <TextField label=\"First name\" value={userGivenNames[0]} />\r\n        <TextField\r\n          label=\"Middle name\"\r\n          value={userGivenNames[1] ? userGivenNames[1] : \"\"}\r\n        />\r\n        <TextField label=\"Last name\" value={userSurname} /> \r\n      </Box>\r\n      <Box>\r\n        <TextField label=\"Email\" value={userEmail} fullWidth />\r\n      </Box>\r\n      <Box>\r\n        <Box>\r\n          <TextField label=\"Medicare number\" value={medicare} fullWidth />\r\n        </Box>\r\n        <Box sx={{ marginTop: \"16px\" }}>\r\n          {verification ? (\r\n            <Typography>Verified</Typography>\r\n          ) : (\r\n            <Button variant=\"contained\" onClick={() => onVerify()}>\r\n              Verify now\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Slider\r\n            min={1}\r\n            max={30}\r\n            getAriaLabel={() => \"Glucose Range\"}\r\n            value={glucoseRange}\r\n            onChange={() => handleSugarChange}\r\n          />\r\n        </Box>\r\n        <Box>\r\n          <Typography>Ketone warning</Typography>\r\n          <TextField\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={ketoneLevel}\r\n            onChange={() => handleKetoneChange}\r\n          />\r\n        </Box>\r\n        <Box sx={{ marginTop: \"16px\" }}>\r\n          <Button variant=\"contained\" onClick={() => onSave()}>\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\SettingsPage.tsx",["125","126"],[],"import { useState, useEffect } from 'react';\r\n\r\nconst SettingsPage = () => {\r\n\r\n    return (\r\n        <p>Settings Content</p>\r\n    );\r\n}\r\n\r\nexport default SettingsPage","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\fetchLocationInfo.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\constants\\EmergencyNumbers.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\EmergencyConfirmationModal.tsx",["127","128"],[],"import { Box, Button, Modal, Typography } from \"@mui/material\";\r\nimport { useState, useEffect, FC } from \"react\";\r\n\r\ninterface IEmergencyConfirmationModalProps {\r\n  modalOpen: boolean;\r\n  setModalOpen: (modalOpen: boolean) => void;\r\n  emergencyNumber: string;\r\n}\r\n\r\nconst EmergencyConfirmationModal: FC<IEmergencyConfirmationModalProps> = ({\r\n  modalOpen,\r\n  setModalOpen,\r\n  emergencyNumber\r\n}) => {\r\n  // TODO implement this \r\n  const callEmergency = () => {\r\n    console.log(`calling ${emergencyNumber}`);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={modalOpen}\r\n      onClose={() => setModalOpen(false)}\r\n      aria-labelledby=\"emergency-modal-title\"\r\n      aria-describedby=\"emergency-modal-description\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"80%\",\r\n          maxWidth: 400,\r\n          bgcolor: \"white\", \r\n          p: 3, \r\n          textAlign: \"center\", \r\n        }}\r\n      >\r\n        <Typography id=\"emergency-modal-title\" variant=\"h6\">\r\n          Are you sure you want to call emergency services?\r\n        </Typography>\r\n        <Typography id=\"emergency-modal-description\">\r\n          This will call {emergencyNumber} immediately\r\n        </Typography>\r\n        <Button onClick={() => callEmergency()} variant=\"contained\">\r\n          Confirm\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EmergencyConfirmationModal;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockUser.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockGlucoseReadings.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\getCountryFromCoordinates.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockInformation.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\MapPage.tsx",["129"],[],"import { useCallback, useEffect, useState } from 'react';\r\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100vh',\r\n  height: '90vh'\r\n};\r\n\r\nconst initialCenter = {\r\n  lat: -3.745,\r\n  lng: -38.523\r\n};\r\n\r\nconst MapPage = () => {\r\n    // TODO get this initial center thing working\r\n  const [center, setCenter] = useState(initialCenter);\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: \"AIzaSyA6MOS8FijRYgWnoQUDcL69Jj0K0Q0fkUs\" \r\n  });\r\n\r\n  const [map, setMap] = useState(null);\r\n\r\n  const onLoad = useCallback(function callback(map: any) {\r\n    const bounds = new window.google.maps.LatLngBounds(center);\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, [center]);\r\n\r\n  const onUnmount = useCallback(function callback(map: any) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Use navigator.geolocation to get the user's position\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const userPosition = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setCenter(userPosition);\r\n      },\r\n      (error) => {\r\n        console.error('Error getting user location:', error);\r\n      }\r\n    );\r\n  }, []); // Empty dependency array to run this effect only once\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={10}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n    >\r\n    </GoogleMap>\r\n  ) : <div>Loading...</div>;\r\n};\r\n\r\nexport default MapPage;\r\n",{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":2,"column":3,"nodeType":"134","messageId":"135","endLine":2,"endColumn":12},{"ruleId":"132","severity":1,"message":"136","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":18},{"ruleId":"132","severity":1,"message":"137","line":1,"column":20,"nodeType":"134","messageId":"135","endLine":1,"endColumn":29},{"ruleId":"132","severity":1,"message":"138","line":30,"column":26,"nodeType":"134","messageId":"135","endLine":30,"endColumn":43},{"ruleId":"132","severity":1,"message":"139","line":31,"column":23,"nodeType":"134","messageId":"135","endLine":31,"endColumn":37},{"ruleId":"132","severity":1,"message":"140","line":32,"column":20,"nodeType":"134","messageId":"135","endLine":32,"endColumn":31},{"ruleId":"132","severity":1,"message":"141","line":33,"column":26,"nodeType":"134","messageId":"135","endLine":33,"endColumn":43},{"ruleId":"132","severity":1,"message":"142","line":34,"column":21,"nodeType":"134","messageId":"135","endLine":34,"endColumn":33},{"ruleId":"132","severity":1,"message":"143","line":35,"column":24,"nodeType":"134","messageId":"135","endLine":35,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":56,"column":9,"nodeType":"146","endLine":59,"endColumn":11},{"ruleId":"132","severity":1,"message":"136","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":18},{"ruleId":"132","severity":1,"message":"137","line":1,"column":20,"nodeType":"134","messageId":"135","endLine":1,"endColumn":29},{"ruleId":"132","severity":1,"message":"136","line":2,"column":10,"nodeType":"134","messageId":"135","endLine":2,"endColumn":18},{"ruleId":"132","severity":1,"message":"137","line":2,"column":20,"nodeType":"134","messageId":"135","endLine":2,"endColumn":29},{"ruleId":"132","severity":1,"message":"147","line":22,"column":10,"nodeType":"134","messageId":"135","endLine":22,"endColumn":13},"no-new-object",["148"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'setUserGivenNames' is assigned a value but never used.","'setUserSurname' is assigned a value but never used.","'setMedicare' is assigned a value but never used.","'setProfilePicture' is assigned a value but never used.","'setUserEmail' is assigned a value but never used.","'setVerification' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'map' is assigned a value but never used.","no-object-constructor"]