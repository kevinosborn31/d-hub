[{"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\index.tsx":"1","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\App.tsx":"3","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\enums\\PageRoutes.ts":"4","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\MenuDrawer.tsx":"5","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\index.ts":"6","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\Iconify.tsx":"7","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\DashboardPage.tsx":"8","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\EmergencyPage.tsx":"9","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ManagementPage.tsx":"10","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\InformationPage.tsx":"11","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ProfilePage.tsx":"12","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\SettingsPage.tsx":"13","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\fetchLocationInfo.ts":"14","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\constants\\EmergencyNumbers.ts":"15","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\EmergencyConfirmationModal.tsx":"16","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockUser.ts":"17","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockGlucoseReadings.ts":"18","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\getCountryFromCoordinates.ts":"19","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockInformation.ts":"20","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\MapPage.tsx":"21","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\ChatBotWindow.tsx":"22","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\FAQSearch.tsx":"23","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\sendGPTMessage.ts":"24","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\RegisterPage.tsx":"25","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\LoginPage.tsx":"26"},{"size":277,"mtime":1695605280259,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1695597838159,"results":"29","hashOfConfig":"28"},{"size":1328,"mtime":1695865783722,"results":"30","hashOfConfig":"28"},{"size":305,"mtime":1695865656273,"results":"31","hashOfConfig":"28"},{"size":4607,"mtime":1695794532157,"results":"32","hashOfConfig":"28"},{"size":527,"mtime":1695865072168,"results":"33","hashOfConfig":"28"},{"size":388,"mtime":1695619670645,"results":"34","hashOfConfig":"28"},{"size":3220,"mtime":1695865140940,"results":"35","hashOfConfig":"28"},{"size":1966,"mtime":1695610488954,"results":"36","hashOfConfig":"28"},{"size":631,"mtime":1695786795880,"results":"37","hashOfConfig":"28"},{"size":1019,"mtime":1695790946409,"results":"38","hashOfConfig":"28"},{"size":3225,"mtime":1695694637443,"results":"39","hashOfConfig":"28"},{"size":167,"mtime":1695605302098,"results":"40","hashOfConfig":"28"},{"size":1476,"mtime":1695790989206,"results":"41","hashOfConfig":"28"},{"size":285,"mtime":1695610186550,"results":"42","hashOfConfig":"28"},{"size":1496,"mtime":1695619633031,"results":"43","hashOfConfig":"28"},{"size":466,"mtime":1695624283795,"results":"44","hashOfConfig":"28"},{"size":1528,"mtime":1695606463203,"results":"45","hashOfConfig":"28"},{"size":565,"mtime":1695610080474,"results":"46","hashOfConfig":"28"},{"size":300,"mtime":1695627779848,"results":"47","hashOfConfig":"28"},{"size":1503,"mtime":1695790939654,"results":"48","hashOfConfig":"28"},{"size":2860,"mtime":1695791277628,"results":"49","hashOfConfig":"28"},{"size":2973,"mtime":1695787987935,"results":"50","hashOfConfig":"28"},{"size":604,"mtime":1695791208972,"results":"51","hashOfConfig":"28"},{"size":1862,"mtime":1695866377532,"results":"52","hashOfConfig":"28"},{"size":1969,"mtime":1695865661161,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"1w9kd6b",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"57"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"57"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"57"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"57"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\index.tsx",[],[],["139"],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\App.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\enums\\PageRoutes.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\MenuDrawer.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\index.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\Iconify.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\DashboardPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\EmergencyPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ManagementPage.tsx",["140","141","142"],[],"import React, { useState } from 'react';\r\n// import DatePicker from 'react-datepicker';\r\n// import 'react-datepicker/dist/react-datepicker.css'; \r\nimport { Box, TextField } from '@mui/material';\r\n\r\nconst ManagementPage = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const handleDateChange = (newDate: Date) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n        {/* <DatePicker\r\n            selected={date}\r\n            onChange={handleDateChange}\r\n            dateFormat=\"MMMM d, yyyy\"\r\n            customInput={<TextField />} \r\n        /> */}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ManagementPage;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\InformationPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\ProfilePage.tsx",["143","144","145","146","147","148","149"],[],"import { Box, Button, Slider, TextField, Typography } from \"@mui/material\";\r\nimport { MOCK_USER } from \"../mocks/_mockUser\";\r\nimport { useState } from \"react\";\r\n\r\nconst ProfilePage = () => {\r\n  const {\r\n    givenNames,\r\n    verified,\r\n    email,\r\n    profilePictureURL,\r\n    medicareNumber,\r\n    sugarRange,\r\n    ketoneWarning,\r\n    surname,\r\n  } = MOCK_USER;\r\n\r\n  const onVerify = () => {\r\n    console.log(`verifying user ${email}`);\r\n  };\r\n\r\n  const onSave = () => {\r\n    return {\r\n\r\n    }\r\n  };\r\n\r\n  // TODO hook these up\r\n  const [glucoseRange, setGlucoseRange] = useState<number[]>(sugarRange as any);\r\n  const [ketoneLevel, setKetoneLevel] = useState(ketoneWarning);\r\n  const [userGivenNames, setUserGivenNames] = useState(givenNames);\r\n  const [userSurname, setUserSurname] = useState(surname);\r\n  const [medicare, setMedicare] = useState(medicareNumber);\r\n  const [profilePicture, setProfilePicture] = useState(profilePictureURL);\r\n  const [userEmail, setUserEmail] = useState(email);\r\n  const [verification, setVerification] = useState(verified);\r\n\r\n  const handleSugarChange = (event: { target: { value: any; }; }) => {\r\n    setGlucoseRange([...event.target.value]);\r\n  };\r\n\r\n  const handleKetoneChange = (event: { target: { value: string; }; }) => {\r\n    const level = event.target.value;\r\n    setKetoneLevel(Number(level));\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: \"20px\",\r\n        marginTop: \"50px\",\r\n      }}\r\n    >\r\n      <Box>\r\n        <img\r\n          src={profilePicture}\r\n          alt={`${userGivenNames[0]} ${userSurname} profile photo`}\r\n        />\r\n      </Box>\r\n      <Box sx={{ display: \"flex\", gap: \"12px\" }}>\r\n        <TextField label=\"First name\" value={userGivenNames[0]} />\r\n        <TextField\r\n          label=\"Middle name\"\r\n          value={userGivenNames[1] ? userGivenNames[1] : \"\"}\r\n        />\r\n        <TextField label=\"Last name\" value={userSurname} /> \r\n      </Box>\r\n      <Box>\r\n        <TextField label=\"Email\" value={userEmail} fullWidth />\r\n      </Box>\r\n      <Box>\r\n        <Box>\r\n          <TextField label=\"Medicare number\" value={medicare} fullWidth />\r\n        </Box>\r\n        <Box sx={{ marginTop: \"16px\" }}>\r\n          {verification ? (\r\n            <Typography>Verified</Typography>\r\n          ) : (\r\n            <Button variant=\"contained\" onClick={() => onVerify()}>\r\n              Verify now\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Slider\r\n            min={1}\r\n            max={30}\r\n            getAriaLabel={() => \"Glucose Range\"}\r\n            value={glucoseRange}\r\n            onChange={() => handleSugarChange}\r\n          />\r\n        </Box>\r\n        <Box>\r\n          <Typography>Ketone warning</Typography>\r\n          <TextField\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={ketoneLevel}\r\n            onChange={() => handleKetoneChange}\r\n          />\r\n        </Box>\r\n        <Box sx={{ marginTop: \"16px\" }}>\r\n          <Button variant=\"contained\" onClick={() => onSave()}>\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\SettingsPage.tsx",["150","151"],[],"import { useState, useEffect } from 'react';\r\n\r\nconst SettingsPage = () => {\r\n\r\n    return (\r\n        <p>Settings Content</p>\r\n    );\r\n}\r\n\r\nexport default SettingsPage","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\fetchLocationInfo.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\constants\\EmergencyNumbers.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\EmergencyConfirmationModal.tsx",["152","153"],[],"import { Box, Button, Modal, Typography } from \"@mui/material\";\r\nimport { useState, useEffect, FC } from \"react\";\r\n\r\ninterface IEmergencyConfirmationModalProps {\r\n  modalOpen: boolean;\r\n  setModalOpen: (modalOpen: boolean) => void;\r\n  emergencyNumber: string;\r\n}\r\n\r\nconst EmergencyConfirmationModal: FC<IEmergencyConfirmationModalProps> = ({\r\n  modalOpen,\r\n  setModalOpen,\r\n  emergencyNumber\r\n}) => {\r\n  // TODO implement this \r\n  const callEmergency = () => {\r\n    console.log(`calling ${emergencyNumber}`);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={modalOpen}\r\n      onClose={() => setModalOpen(false)}\r\n      aria-labelledby=\"emergency-modal-title\"\r\n      aria-describedby=\"emergency-modal-description\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"80%\",\r\n          maxWidth: 400,\r\n          bgcolor: \"white\", \r\n          p: 3, \r\n          textAlign: \"center\", \r\n        }}\r\n      >\r\n        <Typography id=\"emergency-modal-title\" variant=\"h6\">\r\n          Are you sure you want to call emergency services?\r\n        </Typography>\r\n        <Typography id=\"emergency-modal-description\">\r\n          This will call {emergencyNumber} immediately\r\n        </Typography>\r\n        <Button onClick={() => callEmergency()} variant=\"contained\">\r\n          Confirm\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EmergencyConfirmationModal;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockUser.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockGlucoseReadings.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\getCountryFromCoordinates.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\mocks\\_mockInformation.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\MapPage.tsx",["154"],[],"import { useCallback, useEffect, useState } from 'react';\r\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100vh',\r\n  height: '90vh'\r\n};\r\n\r\nconst initialCenter = {\r\n  lat: -3.745,\r\n  lng: -38.523\r\n};\r\n\r\nconst MapPage = () => {\r\n    // TODO get this initial center thing working\r\n  const [center, setCenter] = useState(initialCenter);\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: process.env.GOOGLE_MAPS_API_KEY as string\r\n  });\r\n\r\n  const [map, setMap] = useState(null);\r\n\r\n  const onLoad = useCallback(function callback(map: any) {\r\n    const bounds = new window.google.maps.LatLngBounds(center);\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, [center]);\r\n\r\n  const onUnmount = useCallback(function callback(map: any) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const userPosition = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setCenter(userPosition);\r\n      },\r\n      (error) => {\r\n        console.error('Error getting user location:', error);\r\n      }\r\n    );\r\n  }, []); \r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={10}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n    >\r\n    </GoogleMap>\r\n  ) : <div>Loading...</div>;\r\n};\r\n\r\nexport default MapPage;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\ChatBotWindow.tsx",["155"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, TextField, Button } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { ChatGPTMessage } from \"../interfaces/ChatGPTMessage\";\r\nimport { sendGPTMessage } from \"../utils/sendGPTMessage\";\r\n\r\nconst ChatBotWindow: React.FC = () => {\r\n  const [chatHistory, setChatHistory] = useState<ChatGPTMessage[]>([]);\r\n  const [userInput, setUserInput] = useState<string>(\"\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const openaiApiKey = process.env.CHAT_GPT_API_KEY;\r\n\r\n  const handleUserInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setUserInput(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!userInput.trim()) return;\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const assistantResponse = await sendGPTMessage(userInput);\r\n\r\n      setChatHistory([...chatHistory, { text: userInput, role: \"user\" }]);\r\n      setChatHistory([\r\n        ...chatHistory,\r\n        { text: assistantResponse, role: \"assistant\" },\r\n      ]);\r\n      setUserInput(\"\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        \"https://api.openai.com/v1/chat/completions\",\r\n        {\r\n          model: \"gpt-3.5-turbo\",\r\n          prompt: \"Hello! How can I assist you?\",\r\n          max_tokens: 50, \r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${openaiApiKey}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        const assistantResponse = response.data.choices[0].text;\r\n        setChatHistory([\r\n          ...chatHistory,\r\n          { text: assistantResponse, role: \"assistant\" },\r\n        ]);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n        if (error.response.status === 429) {\r\n            console.error('ChatGPT quota exceeded')\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      <Box\r\n        style={{\r\n          height: \"50vh\", \r\n          overflowY: \"scroll\",\r\n        }}\r\n      >\r\n        {chatHistory.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={\r\n              message.role === \"user\" ? \"user-message\" : \"assistant-message\"\r\n            }\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </Box>\r\n      <TextField\r\n        label=\"Type your message...\"\r\n        variant=\"outlined\"\r\n        value={userInput}\r\n        fullWidth\r\n        onChange={handleUserInputChange}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\" \r\n        onClick={handleSendMessage}\r\n        disabled={isLoading}\r\n        sx={{ marginTop: \"8px\"}}\r\n      >\r\n        Send\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatBotWindow;\r\n","C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\components\\FAQSearch.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\utils\\sendGPTMessage.ts",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\RegisterPage.tsx",[],[],"C:\\Users\\kevin\\Documents\\Development\\d-hub\\client\\src\\pages\\LoginPage.tsx",[],[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":4,"column":15,"nodeType":"160","messageId":"161","endLine":4,"endColumn":24},{"ruleId":"158","severity":1,"message":"162","line":7,"column":10,"nodeType":"160","messageId":"161","endLine":7,"endColumn":14},{"ruleId":"158","severity":1,"message":"163","line":9,"column":9,"nodeType":"160","messageId":"161","endLine":9,"endColumn":25},{"ruleId":"158","severity":1,"message":"164","line":30,"column":26,"nodeType":"160","messageId":"161","endLine":30,"endColumn":43},{"ruleId":"158","severity":1,"message":"165","line":31,"column":23,"nodeType":"160","messageId":"161","endLine":31,"endColumn":37},{"ruleId":"158","severity":1,"message":"166","line":32,"column":20,"nodeType":"160","messageId":"161","endLine":32,"endColumn":31},{"ruleId":"158","severity":1,"message":"167","line":33,"column":26,"nodeType":"160","messageId":"161","endLine":33,"endColumn":43},{"ruleId":"158","severity":1,"message":"168","line":34,"column":21,"nodeType":"160","messageId":"161","endLine":34,"endColumn":33},{"ruleId":"158","severity":1,"message":"169","line":35,"column":24,"nodeType":"160","messageId":"161","endLine":35,"endColumn":39},{"ruleId":"170","severity":1,"message":"171","line":56,"column":9,"nodeType":"172","endLine":59,"endColumn":11},{"ruleId":"158","severity":1,"message":"173","line":1,"column":10,"nodeType":"160","messageId":"161","endLine":1,"endColumn":18},{"ruleId":"158","severity":1,"message":"174","line":1,"column":20,"nodeType":"160","messageId":"161","endLine":1,"endColumn":29},{"ruleId":"158","severity":1,"message":"173","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":18},{"ruleId":"158","severity":1,"message":"174","line":2,"column":20,"nodeType":"160","messageId":"161","endLine":2,"endColumn":29},{"ruleId":"158","severity":1,"message":"175","line":22,"column":10,"nodeType":"160","messageId":"161","endLine":22,"endColumn":13},{"ruleId":"176","severity":1,"message":"177","line":68,"column":6,"nodeType":"178","endLine":68,"endColumn":8,"suggestions":"179"},"no-new-object",["180"],"@typescript-eslint/no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'date' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'setUserGivenNames' is assigned a value but never used.","'setUserSurname' is assigned a value but never used.","'setMedicare' is assigned a value but never used.","'setProfilePicture' is assigned a value but never used.","'setUserEmail' is assigned a value but never used.","'setVerification' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","'map' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatHistory' and 'openaiApiKey'. Either include them or remove the dependency array. You can also do a functional update 'setChatHistory(c => ...)' if you only need 'chatHistory' in the 'setChatHistory' call.","ArrayExpression",["181"],"no-object-constructor",{"desc":"182","fix":"183"},"Update the dependencies array to be: [chatHistory, openaiApiKey]",{"range":"184","text":"185"},[1977,1979],"[chatHistory, openaiApiKey]"]