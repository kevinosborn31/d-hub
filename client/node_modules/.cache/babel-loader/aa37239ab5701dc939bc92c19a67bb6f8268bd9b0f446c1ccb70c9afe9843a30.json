{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Documents\\\\Development\\\\d-hub\\\\client\\\\src\\\\pages\\\\MapPage.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100vh',\n  height: '90vh'\n};\nconst initialCenter = {\n  lat: -3.745,\n  lng: -38.523\n};\nconst MapPage = () => {\n  _s();\n  const [center, setCenter] = useState(initialCenter);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"YOUR_API_KEY\" // Replace with your actual API key\n  });\n\n  const [map, setMap] = useState(null);\n  const onLoad = useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, [center]);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  useEffect(() => {\n    // Use navigator.geolocation to get the user's position\n    navigator.geolocation.getCurrentPosition(position => {\n      const userPosition = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setCenter(userPosition);\n    }, error => {\n      console.error('Error getting user location:', error);\n    });\n  }, []); // Empty dependency array to run this effect only once\n\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n};\n_s(MapPage, \"Ij5e73n8J3hXdVYn6LJ9wYzLu/E=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["useCallback","useEffect","useState","GoogleMap","useJsApiLoader","jsxDEV","_jsxDEV","containerStyle","width","height","initialCenter","lat","lng","MapPage","_s","center","setCenter","isLoaded","id","googleMapsApiKey","map","setMap","onLoad","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","navigator","geolocation","getCurrentPosition","position","userPosition","coords","latitude","longitude","error","console","mapContainerStyle","zoom","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/kevin/Documents/Development/d-hub/client/src/pages/MapPage.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100vh',\r\n  height: '90vh'\r\n};\r\n\r\nconst initialCenter = {\r\n  lat: -3.745,\r\n  lng: -38.523\r\n};\r\n\r\nconst MapPage = () => {\r\n  const [center, setCenter] = useState(initialCenter);\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: \"YOUR_API_KEY\" // Replace with your actual API key\r\n  });\r\n\r\n  const [map, setMap] = useState(null);\r\n\r\n  const onLoad = useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds(center);\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, [center]);\r\n\r\n  const onUnmount = useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Use navigator.geolocation to get the user's position\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const userPosition = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setCenter(userPosition);\r\n      },\r\n      (error) => {\r\n        console.error('Error getting user location:', error);\r\n      }\r\n    );\r\n  }, []); // Empty dependency array to run this effect only once\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={10}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n    >\r\n    </GoogleMap>\r\n  ) : <div>Loading...</div>;\r\n};\r\n\r\nexport default MapPage;\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,SAAS,EAAEC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,CAAC,KAAK;EACXC,GAAG,EAAE,CAAC;AACR,CAAC;AAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAACQ,aAAa,CAAC;EACnD,MAAM;IAAEO;EAAS,CAAC,GAAGb,cAAc,CAAC;IAClCc,EAAE,EAAE,mBAAmB;IACvBC,gBAAgB,EAAE,cAAc,CAAC;EACnC,CAAC,CAAC;;EAEF,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAEpC,MAAMoB,MAAM,GAAGtB,WAAW,CAAC,SAASuB,QAAQA,CAACH,GAAG,EAAE;IAChD,MAAMI,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,YAAY,CAACb,MAAM,CAAC;IAC1DK,GAAG,CAACS,SAAS,CAACL,MAAM,CAAC;IACrBH,MAAM,CAACD,GAAG,CAAC;EACb,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,MAAMe,SAAS,GAAG9B,WAAW,CAAC,SAASuB,QAAQA,CAACH,GAAG,EAAE;IACnDC,MAAM,CAAC,IAAI,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAENpB,SAAS,CAAC,MAAM;IACd;IACA8B,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;MACZ,MAAMC,YAAY,GAAG;QACnBxB,GAAG,EAAEuB,QAAQ,CAACE,MAAM,CAACC,QAAQ;QAC7BzB,GAAG,EAAEsB,QAAQ,CAACE,MAAM,CAACE;MACvB,CAAC;MACDtB,SAAS,CAACmB,YAAY,CAAC;IACzB,CAAC,EACAI,KAAK,IAAK;MACTC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAOtB,QAAQ,gBACbX,OAAA,CAACH,SAAS;IACRsC,iBAAiB,EAAElC,cAAe;IAClCQ,MAAM,EAAEA,MAAO;IACf2B,IAAI,EAAE,EAAG;IACTpB,MAAM,EAAEA,MAAO;IACfQ,SAAS,EAAEA;EAAU;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEZ,CAAC,gBACVxC,OAAA;IAAAyC,QAAA,EAAK;EAAU;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC3B,CAAC;AAAChC,EAAA,CA7CID,OAAO;EAAA,QAEUT,cAAc;AAAA;AAAA4C,EAAA,GAF/BnC,OAAO;AA+Cb,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}