{"ast":null,"code":"import { EMERGENCY_NUMBERS } from \"../constants/EmergencyNumbers\";\nimport { getCountryFromCoordinates } from \"./getCountryFromCoordinates\";\nexport const fetchLocationInfo = async () => {\n  try {\n    if (\"geolocation\" in navigator) {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          const countryCode = await getCountryFromCoordinates(latitude.toString(), longitude.toString());\n          const ambulanceNumber = EMERGENCY_NUMBERS[countryCode];\n          if (ambulanceNumber) {\n            resolve(ambulanceNumber);\n          } else {\n            console.error('Emergency number not found for the country:', countryCode);\n            resolve(\"000\");\n          }\n        }, error => {\n          console.error('Error getting geolocation:', error);\n          resolve(\"000\");\n        });\n      });\n    } else {\n      console.error('Geolocation is not available in this browser.');\n      return \"000\";\n    }\n  } catch (error) {\n    console.error('Error fetching location information:', error);\n    return \"000\";\n  }\n};","map":{"version":3,"names":["EMERGENCY_NUMBERS","getCountryFromCoordinates","fetchLocationInfo","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","position","latitude","coords","longitude","countryCode","toString","ambulanceNumber","console","error"],"sources":["C:/Users/kevin/Documents/Development/d-hub/client/src/utils/fetchLocationInfo.ts"],"sourcesContent":["import { EMERGENCY_NUMBERS } from \"../constants/EmergencyNumbers\";\r\nimport { getCountryFromCoordinates } from \"./getCountryFromCoordinates\";\r\n\r\nexport const fetchLocationInfo = async (): Promise<string> => {\r\n    try {\r\n        if (\"geolocation\" in navigator) {\r\n            return new Promise<string>((resolve, reject) => {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const latitude = position.coords.latitude;\r\n                    const longitude = position.coords.longitude;\r\n\r\n                    const countryCode = await getCountryFromCoordinates(latitude.toString(), longitude.toString());\r\n\r\n                    const ambulanceNumber = EMERGENCY_NUMBERS[countryCode];\r\n\r\n                    if (ambulanceNumber) {\r\n                        resolve(ambulanceNumber);\r\n                    } else {\r\n                        console.error('Emergency number not found for the country:', countryCode);\r\n                        resolve(\"000\");\r\n                    }\r\n                }, (error) => {\r\n                    console.error('Error getting geolocation:', error);\r\n                    resolve(\"000\");\r\n                });\r\n            });\r\n        } else {\r\n            console.error('Geolocation is not available in this browser.');\r\n            return \"000\";\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching location information:', error);\r\n        return \"000\";\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,yBAAyB,QAAQ,6BAA6B;AAEvE,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAA6B;EAC1D,IAAI;IACA,IAAI,aAAa,IAAIC,SAAS,EAAE;MAC5B,OAAO,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAK;QAC5CH,SAAS,CAACI,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;UACzD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;UACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;UAE3C,MAAMC,WAAW,GAAG,MAAMZ,yBAAyB,CAACS,QAAQ,CAACI,QAAQ,CAAC,CAAC,EAAEF,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC;UAE9F,MAAMC,eAAe,GAAGf,iBAAiB,CAACa,WAAW,CAAC;UAEtD,IAAIE,eAAe,EAAE;YACjBV,OAAO,CAACU,eAAe,CAAC;UAC5B,CAAC,MAAM;YACHC,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEJ,WAAW,CAAC;YACzER,OAAO,CAAC,KAAK,CAAC;UAClB;QACJ,CAAC,EAAGY,KAAK,IAAK;UACVD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClDZ,OAAO,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,MAAM;MACHW,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;MAC9D,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,KAAK;EAChB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}